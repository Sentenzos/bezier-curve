{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","activate","toggleActivate","mousePos","setMousePos","points","setPoints","mode","setMode","isMoving","toggleIsMoving","svgFieldRef","useRef","actualPosit","current","length","coords","useMemo","map","point","index","x","y","join","className","xmlns","cn","ref","onMouseMove","e","nativeEvent","offsetX","offsetY","onMouseUp","d","stroke","fill","strokeWidth","cx","cy","key","r","onMouseDown","changeCoords","arr","addEventListener","window","onmouseup","removeEventListener","movePoint","onClick","s","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fe6a961.chunk.js","sourcesContent":["import React, {useMemo, useRef, useState} from 'react';\nimport cn from \"classnames\";\nimport './App.css';\n\n\nfunction App() {\n  //включает/выключает рисование\n  const [activate, toggleActivate] = useState(false);\n  //объект с содержащий координаты мыши внутри svg поля\n  const [mousePos, setMousePos] = useState(null);\n  //массив содержащий объекты с координатами всех точек\n  const [points, setPoints] = useState([]);\n  //режим отображения линий (drawing или bezier)\n  const [mode, setMode] = useState(\"drawing\");\n  //перетаскиваетлся ли в данный момент точка\n  const [isMoving, toggleIsMoving] = useState(false);\n\n\n  const svgFieldRef = useRef(null);\n  const actualPosit = useRef(null);\n  actualPosit.current = mousePos;\n\n\n  const addPoint = () => {\n    setPoints((points) => {\n      return [...points,\n        {\n          x: mousePos.x,\n          y: mousePos.y\n        }\n      ]\n    })\n  };\n\n  //перемещает точку при перетаскивании\n  const movePoint = (index) => {\n    toggleIsMoving(true);\n    const changeCoords = () => {\n      const arr = points.map((point) => {\n        if (point !== points[index]) return point;\n        return actualPosit.current;\n      });\n      setPoints(arr)\n    };\n    svgFieldRef.current.addEventListener('mousemove', changeCoords);\n    window.onmouseup = () => {\n      toggleIsMoving(false);\n      svgFieldRef.current.removeEventListener('mousemove', changeCoords);\n      window.onmouseup = null;\n    }\n  };\n\n  //Если количество точек превышает 4, то автоматическое переключение\n  //в режим drawing.\n  if (mode === \"bezier\" && points.length > 4) {\n    setMode(\"drawing\");\n  }\n\n  //строка с готовыми координатами для элемента path\n  let coords = useMemo(() => {\n    if (mode === \"drawing\" || (mode === \"bezier\" && points.length < 3)) {\n      return points.map((point, index) => {\n        if (!index) return `M${point.x},${point.y}`;\n        return `L${point.x},${point.y}`\n      }).join(\" \");\n    } else if (mode === \"bezier\") {\n      if (points.length === 3) {\n        return `M${points[0].x},${points[0].y} Q ${points[2].x},${points[2].y} \n        ${points[1].x},${points[1].y}`\n      }\n      if (points.length === 4) {\n        return `M${points[0].x},${points[0].y} C ${points[2].x},${points[2].y} \n        ${points[3].x},${points[3].y} ${points[1].x},${points[1].y}`\n      }\n    }\n  }, [points, mode]);\n\n\n  return (\n    <div className=\"content\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\"\n           className={cn(\"svg-field\", activate && \"activated\")}\n           ref={svgFieldRef}\n           onMouseMove={(e) => setMousePos({\n             x: e.nativeEvent.offsetX,\n             y: e.nativeEvent.offsetY\n           })}\n           onMouseUp={activate && !isMoving ? addPoint : null}\n      >\n        <path d={coords} stroke=\"orange\" fill=\"transparent\" strokeWidth={3}/>\n        {\n          points.map((point, index) => {\n            return (\n              <circle cx={point.x}\n                      cy={point.y}\n                      key={index}\n                      r={5}\n                      stroke=\"transparent\"\n                      fill=\"#ff4d4d\"\n                      className=\"circle-point\"\n                      onMouseDown={(e) => movePoint(index)}\n              />\n            )\n          })\n        }\n      </svg>\n      <div className=\"control-btns\">\n        <div className={cn(\"control-btn\", activate && \"selected\")}\n             onClick={() => toggleActivate(s => !s)}>activate\n        </div>\n        <div className={cn(\"control-btn\", mode === \"drawing\" && \"selected\")}\n             onClick={() => setMode(\"drawing\")}>drawing\n        </div>\n        <div className={cn(\"control-btn\", mode === \"bezier\" && \"selected\",\n          points.length > 4 && \"deactivated\")}\n             onClick={points.length < 5 ? () => setMode(\"bezier\") : null}>bezier\n        </div>\n        <div className={cn(\"control-btn\", !points.length && \"deactivated\")}\n             onClick={points.length ? () => setPoints([]) : null}>clear\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}